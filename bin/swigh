#!/usr/bin/env ruby

require 'swigh'
require 'mkmf'

#get argument from bat comand line
file = ARGV[0] if !ARGV.empty?

#get current directory
CURRENT_DIR = Dir.pwd

#get the file given
constant = (File.read(CURRENT_DIR+"/"+file))

#define types limit
TYPES = ["int", "float", "char", "double", "long", "short", "(", ")", "extern"]

#define module scope
MODULE_SCOPE = "
%module #{file.sub(".h", "")}
%{
    #include <#{file}>
%}\n
"


#get extern functions
functions = []
constant.each_line{|line|
    for type in TYPES
        functions << line if (line.include?(type) && 
            (!(functions.include?(line) ) &&
                !(line.include?("\"")) )     ) && !(line.include?("#"))
    end
}

# write SWIG interface file
File.open((CURRENT_DIR+"/"+(file.sub(".h", ".i") ) ), "w"){|f|
    f.puts MODULE_SCOPE
    f.puts *functions
}

# create swig files
system "swig -ruby #{file.sub(".h", ".i")}"

# create MakeFile
Dir.chdir(CURRENT_DIR)
create_makefile(file.sub(".h", ""))

# make
system 'make'

# raise error if C compiler raised error and don't created file.so
raise RuntimeError, "Something was wrong with your C/C++ File =(\nPlease fix it first" if !File.exist?(file.sub(".h", ".so"))

# delete no usefull files 
[
    file.sub(".h", "_wrap.c"),
    file.sub(".h", "_wrap.o"),
    file.sub(".h", ".o"),
    "Makefile"
].each { |file__|
    if File.exist? file__
        $stdout.puts "deleting #{file__}..."
        File.delete(file__);end 
}

# alert alright
puts "  [ Finished successfully ]"